from fastapi import FastAPI, File, UploadFile, Form, HTTPException
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from starlette.requests import Request
import os
import tempfile
import uvicorn
import logging
from app.ocr_utils import process_image_to_pdf, create_text_pdf, check_render_environment

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –î–æ–¥–∞—î–º–æ CORS –¥–ª—è React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –≤–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–æ–º–µ–Ω–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞—Ç–∏–∫—É, —è–∫—â–æ —î –ø–∞–ø–∫–∞ static
if os.path.isdir("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —à–∞–±–ª–æ–Ω–∏ Jinja2 (–∑–∞–≤–∂–¥–∏, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–∞–ø–∫–∏ static)
if os.path.isdir("templates"):
    templates = Jinja2Templates(directory="templates")
else:
    templates = None

@app.on_event("startup")
async def startup_event():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É...")
    check_render_environment()

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    if templates:
        return templates.TemplateResponse("index.html", {"request": request})
    else:
        return HTMLResponse("""
        <html>
            <body>
                <h1>PDF Service</h1>
                <p>Use /upload/ for image to PDF or /text/ for text to PDF</p>
            </body>
        </html>
        """)

@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    logger.info(f"üì§ –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–π–ª: {file.filename}, —Ç–∏–ø: {file.content_type}, —Ä–æ–∑–º—ñ—Ä: {file.size}")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
        if not file.content_type or not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        file_extension = ".jpg"
        if file.filename:
            if file.filename.lower().endswith(('.png', '.gif', '.bmp', '.tiff')):
                file_extension = os.path.splitext(file.filename)[1].lower()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as tmp:
            contents = await file.read()
            if not contents:
                raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π")
            
            tmp.write(contents)
            tmp_path = tmp.name
            logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {tmp_path}, —Ä–æ–∑–º—ñ—Ä: {len(contents)} –±–∞–π—Ç")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        pdf_path = await process_image_to_pdf(tmp_path)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–≤–æ—Ä–∏–≤—Å—è PDF
        if not os.path.exists(pdf_path):
            raise HTTPException(status_code=500, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF")
        
        logger.info(f"‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}")
        
        return FileResponse(
            pdf_path, 
            media_type='application/pdf', 
            filename="ocr_result.pdf",
            headers={"Content-Disposition": "attachment; filename=ocr_result.pdf"}
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {str(e)}")

@app.post("/text/")
async def text_to_pdf(text: str = Form(...)):
    try:
        if not text.strip():
            raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        
        logger.info(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑ —Ç–µ–∫—Å—Ç—É, –¥–æ–≤–∂–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤")
        pdf_path = await create_text_pdf(text)
        
        if not os.path.exists(pdf_path):
            raise HTTPException(status_code=500, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF")
        
        return FileResponse(
            pdf_path, 
            media_type='application/pdf', 
            filename="text_to_pdf.pdf",
            headers={"Content-Disposition": "attachment; filename=text_to_pdf.pdf"}
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑ —Ç–µ–∫—Å—Ç—É: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF: {str(e)}")

@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Tesseract
        from app.ocr_utils import configure_tesseract_for_render
        tesseract_ok = configure_tesseract_for_render()
        
        return {
            "status": "healthy",
            "tesseract": "ok" if tesseract_ok else "error",
            "timestamp": os.environ.get("RENDER_SERVICE_NAME", "local")
        }
    except Exception as e:
        return {
            "status": "error", 
            "error": str(e)
        }

# API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è React
@app.post("/api/upload/")
async def api_upload_file(file: UploadFile = File(...)):
    return await upload_file(file)

@app.post("/api/text/")
async def api_text_to_pdf(text: str = Form(...)):
    return await text_to_pdf(text)

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@app.get("/debug/tesseract")
async def debug_tesseract():
    """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Tesseract"""
    try:
        import pytesseract
        from PIL import Image
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä—Å—ñ—é
        version = pytesseract.get_tesseract_version()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–≤–∏
        languages = pytesseract.get_languages()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–ª—è—Ö
        tesseract_path = pytesseract.pytesseract.tesseract_cmd
        
        return {
            "tesseract_version": str(version),
            "available_languages": languages,
            "tesseract_path": tesseract_path,
            "tesseract_exists": os.path.exists(tesseract_path) if tesseract_path != 'tesseract' else "using system PATH"
        }
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—Ç –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î PORT)
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
