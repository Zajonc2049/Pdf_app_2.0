import os
import tempfile
from fpdf import FPDF
from PIL import Image
import pytesseract
import urllib.request
from pathlib import Path
import base64
import io

# –í–±—É–¥–æ–≤–∞–Ω–∏–π —à—Ä–∏—Ñ—Ç DejaVu Sans –≤ base64 (—á–∞—Å—Ç–∏–Ω–∞ —à—Ä–∏—Ñ—Ç—É –¥–ª—è –∫–∏—Ä–∏–ª–∏—Ü—ñ)
DEJAVU_FONT_BASE64 = """
T1RUTwACAAgAAQAAQ0ZGIAhlgnQAABqcAAAAlkZGVE0BdgIgAAAcNAAAABxHREVGABkAFAAAHFAAAAAe
T1MvMmcbMHEAAACgAAAAYGNtYXCRjgVZAAABAAAAAGRnYXNwAAAAEAAAHDAAAAAIZ2x5ZouAFdgAAAJY
AAAVkmhlYWQWZDbmAAAX7AAAADZoaGVhBfQD7AAAGCQAAAAKAG1heHAAlwAAAAAYLAAAACBuYW1lEWLu
yAAAGEwAAANacG9zdP/uADEAABuoAAAAIAABAAAAAQAAztqNJF8PPPUACwPoAAAAANdFvVgAAAAA10W9
WAAAAAAAIAAgACAAIAAGAAwAGwAsAEYAWgBnAHoAlwCkALcAzwDlAPoBDwEqAUMBXAF5AZYBrwHGAd0B
+gIVAjICTwJs
"""

def configure_tesseract_for_render():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î Tesseract –¥–ª—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Tesseract
        import subprocess
        result = subprocess.run(['tesseract', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Tesseract –∑–Ω–∞–π–¥–µ–Ω–æ: {result.stdout.split()[1] if len(result.stdout.split()) > 1 else '–Ω–µ–≤—ñ–¥–æ–º–∞ –≤–µ—Ä—Å—ñ—è'}")
            return True
        else:
            print("‚ùå Tesseract –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Tesseract: {e}")
        return False

def check_render_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ Render"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Tesseract
    tesseract_ok = configure_tesseract_for_render()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    tessdata = os.environ.get('TESSDATA_PREFIX', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    print(f"TESSDATA_PREFIX: {tessdata}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏ Tesseract
    try:
        languages = pytesseract.get_languages()
        print(f"–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏ Tesseract: {languages}")
        
        if 'ukr' not in languages:
            print("‚ö†Ô∏è –£–í–ê–ì–ê: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        if 'eng' not in languages:
            print("‚ö†Ô∏è –£–í–ê–ì–ê: –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–≤: {e}")
    
    return tesseract_ok

class CyrillicPDF(FPDF):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª–∞—Å FPDF –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ"""
    
    def __init__(self):
        super().__init__()
        self.font_loaded = False
        self.cyrillic_supported = False
    
    def load_cyrillic_font(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —à—Ä–∏—Ñ—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ"""
        if self.font_loaded:
            return self.cyrillic_supported
            
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —à—Ä–∏—Ñ—Ç—ñ–≤
            font_dir = Path("fonts")
            font_dir.mkdir(exist_ok=True)
            font_path = font_dir / "DejaVuSans.ttf"
            
            # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
            if not font_path.exists():
                print("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à—Ä–∏—Ñ—Ç DejaVu Sans...")
                try:
                    # –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö URL –¥–ª—è —à—Ä–∏—Ñ—Ç—É
                    font_urls = [
                        "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf",
                        "https://raw.githubusercontent.com/google/fonts/main/ofl/dejavusans/DejaVuSans.ttf",
                        "https://www.fontsquirrel.com/fonts/download/dejavu-sans"
                    ]
                    
                    for url in font_urls:
                        try:
                            print(f"–°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ {url[:50]}...")
                            urllib.request.urlretrieve(url, font_path)
                            if font_path.exists() and font_path.stat().st_size > 100000:
                                print("–®—Ä–∏—Ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
                                break
                        except Exception as e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ {url[:30]}: {e}")
                            continue
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É: {e}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à—Ä–∏—Ñ—Ç
            if font_path.exists() and font_path.stat().st_size > 100000:
                try:
                    # –î–æ–¥–∞—î–º–æ —à—Ä–∏—Ñ—Ç –¥–æ FPDF
                    self.add_font('DejaVu', '', str(font_path), uni=True)
                    self.set_font('DejaVu', '', 12)
                    self.font_loaded = True
                    self.cyrillic_supported = True
                    print("–®—Ä–∏—Ñ—Ç DejaVu Sans —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
                    return True
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É: {e}")
            
            # –Ø–∫—â–æ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥...")
            self.font_loaded = True
            self.cyrillic_supported = False
            return False
            
        except Exception as e:
            print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É: {e}")
            self.font_loaded = True
            self.cyrillic_supported = False
            return False

async def process_image_to_pdf(image_path):
    """–û–±—Ä–æ–±–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä—é—î PDF –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        # OCR –æ–±—Ä–æ–±–∫–∞ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–∞–º–∏
        text = pytesseract.image_to_string(Image.open(image_path), lang='ukr+eng')
        print(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {text[:100]}...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
        pdf_path = await create_text_pdf_with_cyrillic(text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if os.path.exists(image_path):
            os.unlink(image_path)
            
        return pdf_path
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        raise

async def create_text_pdf(text):
    """–°—Ç–≤–æ—Ä—é—î PDF —Ñ–∞–π–ª –∑ —Ç–µ–∫—Å—Ç–æ–º - –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    return await create_text_pdf_with_cyrillic(text)

async def create_text_pdf_with_cyrillic(text):
    """–°—Ç–≤–æ—Ä—é—î PDF —Ñ–∞–π–ª –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ"""
    print(f"–°—Ç–≤–æ—Ä—é—î–º–æ PDF –∑ —Ç–µ–∫—Å—Ç–æ–º: {text[:50]}...")
    
    # –ú–µ—Ç–æ–¥ 1: –°–ø—Ä–æ–±—É—î–º–æ weasyprint (–Ω–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è HTML->PDF –∑ Unicode)
    try:
        return await create_pdf_weasyprint(text)
    except Exception as e:
        print(f"WeasyPrint –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: –°–ø—Ä–æ–±—É—î–º–æ reportlab –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º
    try:
        return await create_text_pdf_reportlab_advanced(text)
    except Exception as e:
        print(f"Reportlab advanced –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
    
    # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ—Å—Ç–∏–π reportlab
    try:
        return await create_text_pdf_reportlab_simple(text)
    except Exception as e:
        print(f"Reportlab simple –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
    
    # –ú–µ—Ç–æ–¥ 4: FPDF –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —à—Ä–∏—Ñ—Ç–æ–º
    try:
        return await create_text_pdf_fpdf_unicode(text)
    except Exception as e:
        print(f"FPDF Unicode –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
    
    # –ú–µ—Ç–æ–¥ 5: HTML to PDF —á–µ—Ä–µ–∑ wkhtmltopdf –ø–æ–¥—ñ–±–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
    try:
        return await create_pdf_from_html(text)
    except Exception as e:
        print(f"HTML to PDF –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
        
    # –í –∫—Ä–∞–π–Ω—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—é
    print("‚ùå –£–í–ê–ì–ê: –í—Å—ñ –º–µ—Ç–æ–¥–∏ Unicode –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è.")
    return await create_text_pdf_basic_fallback(text)

async def create_pdf_weasyprint(text):
    """–°—Ç–≤–æ—Ä—é—î PDF —á–µ—Ä–µ–∑ WeasyPrint (–Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ—Ç–æ–¥)"""
    try:
        from weasyprint import HTML, CSS
        
        print("üî• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ WeasyPrint (–Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è Unicode)...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ HTML –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                @import url('https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400&display=swap');
                body {{ 
                    font-family: 'Noto Sans', 'DejaVu Sans', Arial, sans-serif; 
                    font-size: 12pt; 
                    line-height: 1.4;
                    margin: 2cm;
                }}
                p {{ margin-bottom: 1em; }}
            </style>
        </head>
        <body>
        """
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
        lines = text.split('\n')
        for line in lines:
            if line.strip():
                html_content += f"<p>{line}</p>\n"
            else:
                html_content += "<p>&nbsp;</p>\n"
        
        html_content += "</body></html>"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            pdf_path = tmp.name
        
        HTML(string=html_content).write_pdf(pdf_path)
        print("‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ WeasyPrint!")
        return pdf_path
        
    except ImportError:
        raise Exception("WeasyPrint –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        raise Exception(f"WeasyPrint –ø–æ–º–∏–ª–∫–∞: {e}")

async def create_text_pdf_reportlab_advanced(text):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π reportlab –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º"""
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        from reportlab.lib.utils import simpleSplit
        
        print("üìÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π ReportLab...")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            pdf_path = tmp.name
        
        # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç—ñ–≤ –¥–ª—è —Å–ø—Ä–æ–±–∏
        font_attempts = [
            {
                'name': 'DejaVuSans',
                'url': 'https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf'
            },
            {
                'name': 'NotoSans', 
                'url': 'https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf'
            }
        ]
        
        font_loaded = False
        active_font = 'DejaVuSans'
        
        for font_info in font_attempts:
            try:
                font_dir = Path("fonts")
                font_dir.mkdir(exist_ok=True)
                font_path = font_dir / f"{font_info['name']}.ttf"
                
                if not font_path.exists():
                    print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ {font_info['name']}...")
                    urllib.request.urlretrieve(font_info['url'], font_path)
                
                if font_path.exists() and font_path.stat().st_size > 50000:
                    pdfmetrics.registerFont(TTFont(font_info['name'], str(font_path)))
                    active_font = font_info['name']
                    font_loaded = True
                    print(f"‚úÖ –®—Ä–∏—Ñ—Ç {font_info['name']} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
                    break
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑ {font_info['name']}: {e}")
                continue
        
        if not font_loaded:
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂–æ–¥–µ–Ω Unicode —à—Ä–∏—Ñ—Ç")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF
        c = canvas.Canvas(pdf_path, pagesize=A4)
        width, height = A4
        c.setFont(active_font, 12)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ–∫—Å—Ç—É
        margin = 72  # 1 inch
        line_height = 16
        max_width = width - 2 * margin
        y_position = height - margin
        
        lines = text.split('\n')
        
        for line in lines:
            if y_position < margin + 50:  # –ù–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
                c.showPage()
                c.setFont(active_font, 12)
                y_position = height - margin
            
            if line.strip():
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥—ñ —Ä—è–¥–∫–∏
                wrapped_lines = simpleSplit(line, active_font, 12, max_width)
                for wrapped_line in wrapped_lines:
                    if y_position < margin + 50:
                        c.showPage()
                        c.setFont(active_font, 12)
                        y_position = height - margin
                    
                    c.drawString(margin, y_position, wrapped_line)
                    y_position -= line_height
            else:
                y_position -= line_height  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
        
        c.save()
        print("‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π ReportLab!")
        return pdf_path
        
    except ImportError:
        raise Exception("ReportLab –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        raise Exception(f"ReportLab advanced –ø–æ–º–∏–ª–∫–∞: {e}")

async def create_text_pdf_reportlab_simple(text):
    """–ü—Ä–æ—Å—Ç–∏–π reportlab –º–µ—Ç–æ–¥"""
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        
        print("üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π ReportLab...")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            pdf_path = tmp.name
        
        c = canvas.Canvas(pdf_path, pagesize=A4)
        width, height = A4
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à—Ä–∏—Ñ—Ç –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
        c.setFont("Helvetica", 12)
        
        y_position = height - 50
        lines = text.split('\n')
        
        for line in lines:
            if y_position < 50:
                c.showPage()
                c.setFont("Helvetica", 12)
                y_position = height - 50
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ UTF-8, –ø–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –≤–∏–≤–µ—Å—Ç–∏
            try:
                c.drawString(50, y_position, line)
            except:
                # –Ø–∫—â–æ –Ω–µ –ø—Ä–∞—Ü—é—î, –∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ ASCII —Å–∏–º–≤–æ–ª–∏
                ascii_line = ''.join(char if ord(char) < 128 else '?' for char in line)
                c.drawString(50, y_position, ascii_line)
            
            y_position -= 15
        
        c.save()
        print("‚ö†Ô∏è PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–∏–π ReportLab (–º–æ–∂–ª–∏–≤–æ –±–µ–∑ Unicode)")
        return pdf_path
        
    except Exception as e:
        raise Exception(f"Simple ReportLab –ø–æ–º–∏–ª–∫–∞: {e}")

async def create_pdf_from_html(text):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF —á–µ—Ä–µ–∑ HTML"""
    try:
        import subprocess
        
        print("üåê –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF —á–µ—Ä–µ–∑ HTML...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ HTML —Ñ–∞–π–ª
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{ font-family: Arial, sans-serif; font-size: 12pt; margin: 2cm; }}
                p {{ margin-bottom: 1em; }}
            </style>
        </head>
        <body>
        """
        
        lines = text.split('\n')
        for line in lines:
            if line.strip():
                html_content += f"<p>{line}</p>\n"
            else:
                html_content += "<p>&nbsp;</p>\n"
        
        html_content += "</body></html>"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ HTML —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix=".html", encoding='utf-8') as html_tmp:
            html_tmp.write(html_content)
            html_path = html_tmp.name
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as pdf_tmp:
            pdf_path = pdf_tmp.name
        
        # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó HTML –≤ PDF
        commands = [
            ['wkhtmltopdf', html_path, pdf_path],
            ['weasyprint', html_path, pdf_path],
            ['prince', html_path, pdf_path]
        ]
        
        success = False
        for cmd in commands:
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                if result.returncode == 0 and os.path.exists(pdf_path) and os.path.getsize(pdf_path) > 100:
                    success = True
                    print(f"‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ {cmd[0]}!")
                    break
            except Exception as e:
                print(f"–ö–æ–º–∞–Ω–¥–∞ {cmd[0]} –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
                continue
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π HTML
        os.unlink(html_path)
        
        if success:
            return pdf_path
        else:
            os.unlink(pdf_path)
            raise Exception("–ñ–æ–¥–Ω–∞ HTML->PDF —É—Ç–∏–ª—ñ—Ç–∞ –Ω–µ –ø—Ä–∞—Ü—é—î")
            
    except Exception as e:
        raise Exception(f"HTML to PDF –ø–æ–º–∏–ª–∫–∞: {e}")

async def create_text_pdf_fpdf_unicode(text):
    """FPDF –∑ Unicode —à—Ä–∏—Ñ—Ç–æ–º"""
    try:
        print("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FPDF –∑ Unicode...")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            pdf_path = tmp.name
        
        pdf = CyrillicPDF()
        cyrillic_loaded = pdf.load_cyrillic_font()
        
        if not cyrillic_loaded:
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Unicode —à—Ä–∏—Ñ—Ç –¥–ª—è FPDF")
        
        pdf.add_page()
        
        lines = text.split('\n')
        for line in lines:
            if pdf.get_y() + 10 > 280:
                pdf.add_page()
                pdf.set_font('DejaVu', '', 12)
            
            pdf.cell(0, 8, line, ln=True)
        
        pdf.output(pdf_path)
        print("‚úÖ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ FPDF Unicode!")
        return pdf_path
        
    except Exception as e:
        raise Exception(f"FPDF Unicode –ø–æ–º–∏–ª–∫–∞: {e}")

async def create_text_pdf_basic_fallback(text):
    """–û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—î—é"""
    try:
        print("‚ùå –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–¢–¨–°–Ø –¢–†–ê–ù–°–õ–Ü–¢–ï–†–ê–¶–Ü–Ø!")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            pdf_path = tmp.name
        
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font('Arial', '', 12)
        
        lines = text.split('\n')
        for line in lines:
            transliterated = transliterate_cyrillic(line)
            pdf.cell(0, 10, transliterated, ln=True)
        
        pdf.output(pdf_path)
        return pdf_path
        
    except Exception as e:
        print(f"–ù–∞–≤—ñ—Ç—å fallback –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
        raise

def transliterate_cyrillic(text):
    """–¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è –∫–∏—Ä–∏–ª–∏—Ü—ñ"""
    cyrillic_to_latin = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—î': 'ye',
        '–∂': 'zh', '–∑': 'z', '–∏': 'y', '—ñ': 'i', '—ó': 'yi', '–π': 'y', '–∫': 'k',
        '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's',
        '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh',
        '—â': 'shch', '—å': '', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Ñ': 'YE',
        '–ñ': 'ZH', '–ó': 'Z', '–ò': 'Y', '–Ü': 'I', '–á': 'YI', '–ô': 'Y', '–ö': 'K',
        '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S',
        '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'KH', '–¶': 'TS', '–ß': 'CH', '–®': 'SH',
        '–©': 'SHCH', '–¨': '', '–Æ': 'YU', '–Ø': 'YA'
    }
    
    result = ""
    for char in text:
        result += cyrillic_to_latin.get(char, char)
    return result

# –ó–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
async def create_text_pdf_unicode(text):
    """–°—Ç–≤–æ—Ä—é—î PDF —Ñ–∞–π–ª –∑ —Ç–µ–∫—Å—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –º–µ—Ç–æ–¥"""
    return await create_text_pdf_with_cyrillic(text)
