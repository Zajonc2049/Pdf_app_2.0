import os
import tempfile
from fpdf import FPDF
from PIL import Image
import pytesseract
import urllib.request
from pathlib import Path
import base64
import io
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è Render
def configure_tesseract_for_render():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î Tesseract –¥–ª—è —Ä–æ–±–æ—Ç–∏ –Ω–∞ Render"""
    # –ù–∞ Render Tesseract –∑–∞–∑–≤–∏—á–∞–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º—ñ—Å—Ü—ñ
    possible_paths = [
        '/usr/bin/tesseract',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à–ª—è—Ö –Ω–∞ Linux
        '/usr/local/bin/tesseract',
        '/opt/homebrew/bin/tesseract'
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            pytesseract.pytesseract.tesseract_cmd = path
            logger.info(f"Tesseract –∑–Ω–∞–π–¥–µ–Ω–æ: {path}")
            return True
    
    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∫–æ–º–∞–Ω–¥—É
    logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∫–æ–º–∞–Ω–¥—É tesseract")
    return True

async def process_image_to_pdf(image_path):
    """–û–±—Ä–æ–±–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä—é—î PDF –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è Render)"""
    try:
        logger.info(f"üîç Render: –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_path}")
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Tesseract
        configure_tesseract_for_render()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        
        file_size = os.path.getsize(image_path)
        if file_size == 0:
            raise ValueError("–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π")
        
        logger.info(f"üìè –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç")
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        try:
            with Image.open(image_path) as img:
                logger.info(f"üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ: {img.format}, —Ä–æ–∑–º—ñ—Ä: {img.size}, —Ä–µ–∂–∏–º: {img.mode}")
                
                # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è OCR
                if img.mode not in ('RGB', 'L'):
                    img = img.convert('RGB')
                    logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ RGB")
                
                # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥—É–∂–µ –≤–µ–ª–∏–∫–µ, –∑–º–µ–Ω—à—É—î–º–æ –π–æ–≥–æ
                max_size = 2000
                if img.width > max_size or img.height > max_size:
                    img.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)
                    logger.info(f"üìâ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º–µ–Ω—à–µ–Ω–æ –¥–æ: {img.size}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                optimized_path = image_path + "_opt.jpg"
                img.save(optimized_path, 'JPEG', quality=95)
                image_path = optimized_path
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            raise ValueError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        
        # –¢–µ—Å—Ç—É—î–º–æ Tesseract
        try:
            version = pytesseract.get_tesseract_version()
            logger.info(f"‚úÖ Tesseract –≤–µ—Ä—Å—ñ—è: {version}")
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ Tesseract: {e}")
            # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            os.environ['TESSDATA_PREFIX'] = '/usr/share/tesseract-ocr/5/tessdata/'
        
        # OCR –æ–±—Ä–æ–±–∫–∞ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        text = ""
        ocr_configs = [
            {'lang': 'ukr+eng', 'config': '--psm 6 -c preserve_interword_spaces=1'},
            {'lang': 'ukr+eng', 'config': '--psm 3'},
            {'lang': 'eng', 'config': '--psm 6'},
            {'lang': 'eng', 'config': '--psm 3'},
            {'lang': '', 'config': '--psm 6'}  # –ë–µ–∑ –º–æ–≤–∏
        ]
        
        logger.info("üî§ –ü–æ—á–∞—Ç–æ–∫ OCR –æ–±—Ä–æ–±–∫–∏...")
        
        for i, ocr_config in enumerate(ocr_configs):
            try:
                logger.info(f"üîç OCR —Å–ø—Ä–æ–±–∞ {i+1}: lang='{ocr_config['lang']}', config='{ocr_config['config']}'")
                
                if ocr_config['lang']:
                    text = pytesseract.image_to_string(
                        Image.open(image_path),
                        lang=ocr_config['lang'],
                        config=ocr_config['config']
                    )
                else:
                    text = pytesseract.image_to_string(
                        Image.open(image_path),
                        config=ocr_config['config']
                    )
                
                if text.strip():
                    logger.info(f"‚úÖ OCR —É—Å–ø—ñ—à–Ω–æ: {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤, –ø–µ—Ä—à—ñ 100: {text[:100]}")
                    break
                else:
                    logger.warning(f"‚ö†Ô∏è OCR –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    
            except Exception as e:
                logger.warning(f"‚ùå OCR —Å–ø—Ä–æ–±–∞ {i+1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—è: {e}")
                continue
        
        # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ
        if not text.strip():
            text = """–¢–µ–∫—Å—Ç –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ.

–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
‚Ä¢ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É
‚Ä¢ –Ø–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è
‚Ä¢ –¢–µ–∫—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–π –Ω–µ—á—ñ—Ç–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º
‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

–°–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ó—Ä–æ–±–∏—Ç–∏ –±—ñ–ª—å—à —á—ñ—Ç–∫–µ —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
            logger.warning("‚ö†Ô∏è OCR –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ —Ç–µ–∫—Å—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF
        logger.info("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF...")
        pdf_path = await create_text_pdf_with_cyrillic(text)
        
        if not os.path.exists(pdf_path):
            raise Exception("PDF —Ñ–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        logger.info(f"‚úÖ PDF —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}")
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        cleanup_files = [image_path, image_path + "_opt.jpg"]
        for file_path in cleanup_files:
            try:
                if os.path.exists(file_path):
                    os.unlink(file_path)
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ: {file_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {file_path}: {e}")
        
        return pdf_path
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        
        # –û—á–∏—â–µ–Ω–Ω—è —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        cleanup_files = [image_path, image_path + "_opt.jpg"]
        for file_path in cleanup_files:
            try:
                if os.path.exists(file_path):
                    os.unlink(file_path)
            except:
                pass
        
        raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞ Render
def check_render_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ Render"""
    logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Tesseract
    try:
        version = pytesseract.get_tesseract_version()
        logger.info(f"‚úÖ Tesseract: {version}")
    except:
        logger.error("‚ùå Tesseract –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–≤
    try:
        langs = pytesseract.get_languages()
        logger.info(f"‚úÖ –ú–æ–≤–∏: {langs}")
    except:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–≤")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–æ–∫
    os.makedirs("temp", exist_ok=True)
    os.makedirs("fonts", exist_ok=True)
    logger.info("‚úÖ –ü–∞–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    
    return True
